class Counter {
    private int c = 0;

    public void increment() {
        c++;
    }

    public void decrement() {
        c--;
    }

    public int value() {
        return c;
    }

}

Interference happens when two operations, running in different threads,
but acting on the same data, interleave. This means that the two operations
consist of multiple steps, and the sequences of steps overlap.

Suppose Thread A invokes increment at about the same time Thread B invokes decrement.
If the initial value of c is 0, their interleaved actions might follow this sequence:

    Thread A: Retrieve c.
    Thread B: Retrieve c.
    Thread A: Increment retrieved value; result is 1.
    Thread B: Decrement retrieved value; result is -1.
    Thread A: Store result in c; c is now 1.
    Thread B: Store result in c; c is now -1.

Thread A's result is lost, overwritten by Thread B. This particular
interleaving is only one possibility. Under different circumstances
it might be Thread B's result that gets lost, or there could be no 
error at all. Because they are unpredictable, thread interference bugs
can be difficult to detect and fix.
==============================================================================================================================
To make a method synchronized, simply add the synchronized keyword to its declaration:

public class SynchronizedCounter {
    private int c = 0;

    public synchronized void increment() {
        c++;
    }

    public synchronized void decrement() {
        c--;
    }

    public synchronized int value() {
        return c;
    }
}
If count is an instance of SynchronizedCounter, then making these methods synchronized has two effects:

First, it is not possible for two invocations of synchronized methods on the same object to interleave.
When one thread is executing a synchronized method for an object, all other threads that invoke synchronized
methods for the same object block (suspend execution) until the first thread is done with the object.


Second, when a synchronized method exits, it automatically establishes a happens-before relationship with
any subsequent invocation of a synchronized method for the same object. This guarantees that changes to the
state of the object are visible to all threads.


Note that constructors cannot be synchronized â€” using the synchronized keyword with a constructor is a syntax error.
Synchronizing constructors doesn't make sense, because only the thread that creates an object should have access to it
while it is being constructed.
=================================================================================================================================
